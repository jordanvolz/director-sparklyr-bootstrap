#
#Copyright (c) 2016 Cloudera, Inc. All rights reserved.
#created by jordan.volz@cloudera.com

#
#  AWS Cloudera Director configuration file with RStudio Server + SparklyR installed on an edge node
#

#
# Cluster name
#
name: SPARKLYR-CLUSTER

#
# Cloud provider configuration (credentials, region or zone and optional default image)
#
provider {
    type: aws

    #
    # Get AWS credentials from the OS environment
    # See http://docs.aws.amazon.com/general/latest/gr/aws-security-credentials.html
    #
    # If specifying the access keys directly and not through variables, make sure to enclose
    # them in double quotes.
    #
    # Not needed when running on an instance launched with an IAM role.

    accessKeyId: "<AWS-ACCESS-KEY-ID-REPLACE-ME>"
    secretAccessKey: "<AWS-SECRET-ACCESS-KEY-REPLACE-ME>"

    #
    # ID of the Amazon AWS region to use
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using-regions-availability-zones.html
    #

    region: us-west-2

    #
    # Region endpoint (if you are using one of the Gov. regions)
    #

    # regionEndpoint: ec2.us-gov-west-1.amazonaws.com

    #
    # ID of the VPC subnet
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Subnets.html
    #

    subnetId: <SUBNET-REPLACE-ME>

    #
 # Comma separated list of security group IDs
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_SecurityGroups.html
    #

    securityGroupsIds: <SECURITY-GROUP-REPLACE-ME>

    #
    # A prefix that Cloudera Director should use when naming the instances (this is not part of the hostname)
    #

    instanceNamePrefix: DIRECTOR-SPARKLYR-CLUSTER

    #
    # Specify a size for the root volume (in GBs). Cloudera Director will automatically expand the
    # filesystem so that you can use all the available disk space for your application
    # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/storage_expand_partition.html
    #

    # rootVolumeSizeGB: 100 # defaults to 50 GB if not specified

    #
    # Specify the type of the EBS volume used for the root partition. Defaults to gp2
    # See: http://aws.amazon.com/ebs/details/
    #

    # rootVolumeType: gp2 # OR standard (for EBS magnetic)

    #
    # Whether to associate a public IP address with instances or not. If this is false
    # we expect instances to be able to access the internet using a NAT instance
    #
    # Currently the only way to get optimal S3 data transfer performance is to assign
    # public IP addresses to your instances and not use NAT (public subnet type of setup)
    #
    # See: http://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-ip-addressing.html
    #

     associatePublicIpAddresses: true

}

#
# SSH credentials to use to connect to the instances
#

ssh {
    username: ec2-user # for RHEL image
    privateKey: <PATH-TO-PEM-FILE-REPLACE-ME> # with an absolute path to .pem file
}

#
# A list of instance types to use for group of nodes or management services
#

instances {

    m42x {
        type: m4.2xlarge   # requires an HVM AMI

        #
        # Amazon Machine Image (AMI)
        #
        # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html
        # Compatibility matrix: https://aws.amazon.com/amazon-linux-ami/instance-type-matrix/
        #
        # Red Hat Enterprise Linux AMI IDs: http://aws.amazon.com/partners/redhat/
        # We support Red Hat Enterprise Linux 6.4 (64bit) 64bit PV or HVM
        #

        image: ami-a3fa16c3

        #
        # Name of the IAM Role to use for this instance type
        # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
        #

        # iamProfileName: iam-profile-REPLACE-ME

        tags {
            owner: "<OWNER-REPLACE-ME>"
           #owner: ${?USER}
    }

        bootstrapScript: """#!/bin/sh

          # This is an embedded bootstrap script that runs as root and can be used to customize
          # the instances immediately after boot and before any other Cloudera Director action

          # If the exit code is not zero Cloudera Director will automatically retry

          echo 'Hello World!'
          exit 0

        """

        #
        # Flag indicating whether to normalize the instance. Not setting normalization here implies that your
        # bootstrap script will take care of normalization. This is an advanced configuration that will require
        # assistance from Cloudera support.
        #
        # Normalization includes:
        #   downloading and installing packages
        #   minimizing swappiness
        #   increasing the maximun number of open files
        #   mounting ephemeral disks
        #   resizing the root partition.
        #
        # Defaults to true
        #

        # normalizeInstance: true

    }

        m42x-edge {
        type: m4.2xlarge   # requires an HVM AMI

        #
        # Amazon Machine Image (AMI)
        #
        # See: http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AMIs.html
        # Compatibility matrix: https://aws.amazon.com/amazon-linux-ami/instance-type-matrix/
        #
        # Red Hat Enterprise Linux AMI IDs: http://aws.amazon.com/partners/redhat/
        # We support Red Hat Enterprise Linux 6.4 (64bit) 64bit PV or HVM
        #

        image: ami-a3fa16c3

        #
        # Name of the IAM Role to use for this instance type
        # http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html
        #

        # iamProfileName: iam-profile-REPLACE-ME

        tags {
            owner: "<OWNER--REPLACE-ME>"
           #owner: ${?USER}
    }

        bootstrapScript: """#!/bin/bash
#created by jordan.volz@cloudera.com
#Built for AWS AMI: ami-775e4f16 (RHEL 7.2)

#install R
sudo yum -y --exclude=kernel\* update
sudo rpm -Uvh https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
sudo yum install -y wget texlive texlive-epsf texinfo texinfo-tex libcurl-devel R

#install rstudio-server
wget https://download2.rstudio.org/rstudio-server-rhel-1.0.44-x86_64.rpm
sudo yum -y install --nogpgcheck rstudio-server-rhel-1.0.44-x86_64.rpm
sudo service rstudio-server start

#setup SPARK_HOME env variable
sudo useradd rsuser
sudo sh -c "echo 'rsuser:cloudera' | chpasswd"
sudo sh -c "echo 'SPARK_HOME=/opt/cloudera/parcels/CDH/lib/spark/' >> /usr/lib64/R/etc/Renviron"

echo "Installing R packages"
#install packages
# Rscript -e 'update.packages(ask = FALSE)'
for pkgname in sparklyr nycflights13
do
    sudo Rscript -e 'if(!require("'$pkgname'", character.only = TRUE, quietly = TRUE)) install.packages("'$pkgname'", dependencies = TRUE, repos="https://cran.r-project.org")'
done

exit 0

        """

        #
        # Flag indicating whether to normalize the instance. Not setting normalization here implies that your
        # bootstrap script will take care of normalization. This is an advanced configuration that will require
        # assistance from Cloudera support.
        #
        # Normalization includes:
        #   downloading and installing packages
        #   minimizing swappiness
        #   increasing the maximun number of open files
        #   mounting ephemeral disks
        #   resizing the root partition.
        #
        # Defaults to true
        #

        # normalizeInstance: true

    }
}

#
# Configuration for Cloudera Manager. Cloudera Director can use an existing instance
# or bootstrap everything from scratch for a new cluster
#

cloudera-manager {

    instance: ${instances.m42x} {
        tags {
            application: "Cloudera Manager 5"
        }
    }

    #
    # Automatically activate 60-Day Cloudera Enterprise Trial
    #

    enableEnterpriseTrial: true

}

#
# Cluster description
#

cluster {

    # List the products and their versions that need to be installed.
    # These products must have a corresponding parcel in the parcelRepositories
    # configured above. The specified version will be used to find a suitable
    # parcel. Specifying a version that points to more than one parcel among
    # those available will result in a configuration error. Specify more granular
    # versions to avoid conflicts.

    products {
      CDH: 5  
    }

    services: [HDFS, YARN, ZOOKEEPER, HIVE, IMPALA, SPARK_ON_YARN, HUE, OOZIE]

   master {
        count: 1
        instance: ${instances.m42x} {
            tags{
            group: master
            }
        }

        roles {
        HDFS: [NAMENODE, SECONDARYNAMENODE]
        YARN: [RESOURCEMANAGER, JOBHISTORY]
        ZOOKEEPER: [SERVER]
        HIVE: [HIVESERVER2, HIVEMETASTORE]
        HUE: [HUE_SERVER]
        OOZIE: [OOZIE_SERVER]
        SPARK_ON_YARN: [SPARK_YARN_HISTORY_SERVER]
        IMPALA: [CATALOGSERVER, STATESTORE]
      }
    }


    worker {
        count: 3
        instance: ${instances.m42x} {
            tags{
                group: worker
            }
        }
        roles {
        HDFS: [DATANODE]
        YARN: [NODEMANAGER]
        IMPALA: [IMPALAD]
      }
    }

    gateway {
        count: 1
        instance: ${instances.m42x-edge} {
            tags {
            group: gateway
            }
        }
        roles {
        HDFS: [GATEWAY]
        HIVE: [GATEWAY]
        SPARK_ON_YARN: [GATEWAY]
      }
    }

 postCreateScripts: ["""#!/bin/sh

    # This is an embedded post creation script script that runs as root and can be used to
    # customize the cluster after it has been created.

    # If the exit code is not zero Cloudera Director will fail

    sudo -u hdfs hadoop fs -mkdir /user/rsuser
    sudo -u hdfs hadoop fs -chown rsuser:rsuser /user/rsuser
    """,
    """#!/bin/sh

    # Additionally, multiple post creation scripts can be supplied.  They will run in the
    # order they are listed here.

    echo 'Hello again!'
    exit 0
    """]
}


